name: Build Begehungsbericht

on:
  # Manuell startbar – optional mit Issue-Nummer
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue-Nummer (optional bei manuellem Start)"
        required: false
  # Automatisch, wenn ein Label gesetzt wird
  issues:
    types: [labeled]

# Rechte – reicht für Lesen/Schreiben an Issues falls später nötig
permissions:
  contents: read
  issues: write

jobs:
  build:
    # Nur laufen, wenn manueller Start ODER Label "begehung" gesetzt wurde
    if: >-
      ${{ github.event_name == 'workflow_dispatch' ||
          (github.event_name == 'issues' &&
           github.event.action == 'labeled' &&
           github.event.label.name == 'begehung') }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Meta: Issue-Nummer bestimmen ---
      - name: Resolve issue number
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "num=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "num=${{ inputs.issue_number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare reports folder
        run: mkdir -p reports

      # --- LaTeX / Pandoc installieren ---
      - name: Install Pandoc + TeX Live
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc \
            texlive-latex-recommended \
            texlive-latex-extra \
            texlive-fonts-recommended \
            fonts-lmodern
          pandoc --version || true
          pdflatex --version || true
          
      # --- Issue-Body in Datei schreiben, damit render_report.py ihn findet ---
      - name: Prepare issue_body.md
        run: |
          set -e
          if [ "${{ github.event_name }}" = "issues" ]; then
            printf "%s" "${{ github.event.issue.body }}" > issue_body.md
            echo "Wrote issue_body.md from event.issue.body"
          elif [ -f docs/beispiel-report.md ]; then
            cp docs/beispiel-report.md issue_body.md
            echo "Wrote issue_body.md from docs/beispiel-report.md (manual run)"
          else
            echo "# Begehungsbericht" > issue_body.md
            echo "" >> issue_body.md
            echo "Kein Issue-Body und keine Beispieldatei verfügbar." >> issue_body.md
            echo "Wrote minimal issue_body.md placeholder"
          fi
          ls -l issue_body.md

      # --- Markdown erzeugen ---
      # Nimmt scripts/render_report.py, wenn vorhanden – sonst Fallback auf docs/beispiel-report.md
      - name: Render markdown from issue (with fallback)
        run: |
          set -e
          if [ -f scripts/render_report.py ]; then
            echo "Using scripts/render_report.py"
            python3 scripts/render_report.py "${{ steps.meta.outputs.num }}" > report.md
          elif [ -f docs/beispiel-report.md ]; then
            echo "Using fallback docs/beispiel-report.md"
            cp docs/beispiel-report.md report.md
          else
            echo "Fallback: create minimal markdown"
            echo "# Begehungsbericht" > report.md
            echo "" >> report.md
            echo "Kein Renderer gefunden. Dies ist ein Platzhalter." >> report.md
          fi
          echo "----- Preview of report.md -----"
          head -n 50 report.md || true
          echo "--------------------------------"

      # --- PDF bauen (Pandoc + LaTeX). Fehler brechen den Build nicht ab ---
      - name: Build PDF (Pandoc + LaTeX)
        continue-on-error: true
        run: |
          pandoc report.md \
            --from=markdown+raw_tex+pipe_tables \
            --template=docs/template.latex \
            --pdf-engine=pdflatex \
            --resource-path=".:docs" \
            -o "reports/begehung-${{ steps.meta.outputs.num }}.pdf"

      # --- Debug: reines TeX exportieren ---
      - name: Write TeX debug copy
        run: |
          pandoc report.md \
            --from=markdown+raw_tex+pipe_tables \
            --template=docs/template.latex \
            --resource-path=".:docs" \
            -t latex \
            -o "reports/debug-${{ steps.meta.outputs.num }}.tex"

      # --- Platzhalter: ToDo-CSV (optional) ---
      - name: Create placeholder ToDo CSV (optional)
        run: |
          echo "title,status,remark" > "reports/todos-${{ steps.meta.outputs.num }}.csv"

      # --- Artefakte hochladen ---
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: begehung-${{ steps.meta.outputs.num }}
          path: |
            reports/*.pdf
            reports/*.tex
            reports/*.csv
          if-no-files-found: warn
          retention-days: 7
