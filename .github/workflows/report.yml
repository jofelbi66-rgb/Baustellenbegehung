name: Build Begehungsbericht

on:
  issues:
    types:
      - labeled
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue-Nummer (z. B. 12)"
        required: true

permissions:
  contents: read

jobs:
  build:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.label.name == 'begehung' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Issue-Nummer auflösen (manuell oder über Label-Event)
      - name: Resolve issue number
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "num=${{ inputs.issue_number }}" >> "$GITHUB_OUTPUT"
          else
            echo "num=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          fi

      # Issue-Body holen (zuverlässig, auch bei manuellem Start)
      - name: Fetch issue body
        id: fetch
        uses: actions/github-script@v7
        with:
          script: |
            const n = Number("${{ steps.meta.outputs.num }}");
            const {data} = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: n,
            });
            core.setOutput('body', data.body || '');

      # Body in Datei schreiben
      - name: Write issue body to file
        run: |
          cat > issue_body.md <<'EOF'
          ${{ steps.fetch.outputs.body }}
          EOF

      - name: Install pandoc + LaTeX + Python
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pandoc python3 \
            texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended fonts-lmodern

      - name: Render markdown from issue (tables)
        run: |
          python3 scripts/render_report.py

      # Immer erst .tex erzeugen, dann PDF (Fehler beim PDF brechen nicht ab)
      - name: Build TeX and PDF
        run: |
          set -e
          mkdir -p reports

          # 1) LaTeX-Quelle immer erzeugen
          pandoc report.md \
            --from=markdown+raw_tex+pipe_tables \
            --template=docs/template.latex \
            --resource-path=".:docs" \
            -t latex \
            -o "reports/debug-${{ steps.meta.outputs.num }}.tex"

          # 2) PDF versuchen – Fehler nicht abbrechen
          set +e
          pandoc report.md \
            --from=markdown+raw_tex+pipe_tables \
            --template=docs/template.latex \
            --pdf-engine=pdflatex \
            --resource-path=".:docs" \
            -o "reports/begehung-${{ steps.meta.outputs.num }}.pdf"
          echo "Pandoc exit code: $?"
          set -e

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: begehung-${{ steps.meta.outputs.num }}
          path: reports/
          if-no-files-found: warn
